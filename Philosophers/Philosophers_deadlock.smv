--file E:\Documenti\Eclipse\Default\ASMTest\Philosophers\Philosophers_deadlock.smv
MODULE main
	VAR
		hungry_PHILOSOPHER1: boolean; --monitored
		hungry_PHILOSOPHER2: boolean; --monitored
		hungry_PHILOSOPHER3: boolean; --monitored
		hungry_PHILOSOPHER4: boolean; --monitored
		owner_FORK1: {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}; --controlled
		owner_FORK2: {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}; --controlled
		owner_FORK3: {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}; --controlled
		owner_FORK4: {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}; --controlled
		state_PHILOSOPHER1: {EATING, STATE_UNDEF, THINKING}; --controlled
		state_PHILOSOPHER2: {EATING, STATE_UNDEF, THINKING}; --controlled
		state_PHILOSOPHER3: {EATING, STATE_UNDEF, THINKING}; --controlled
		state_PHILOSOPHER4: {EATING, STATE_UNDEF, THINKING}; --controlled
		--declaration of choose variables
		var_$phi_0: {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4};
	DEFINE
		deadlock := (!((owner_FORK2 = PHILOSOPHER_UNDEF) | (owner_FORK4 = PHILOSOPHER_UNDEF) | (owner_FORK1 = PHILOSOPHER_UNDEF) | (owner_FORK3 = PHILOSOPHER_UNDEF)) & !((hasAllForks_PHILOSOPHER1 | (state_PHILOSOPHER1 != EATING)) | ((state_PHILOSOPHER3 != EATING) | hasAllForks_PHILOSOPHER3) | (hasAllForks_PHILOSOPHER4 | (state_PHILOSOPHER4 != EATING)) | (hasAllForks_PHILOSOPHER2 | (state_PHILOSOPHER2 != EATING))));
		hasAllForks_PHILOSOPHER1 :=
			case
				(FORK1 = rightFork_PHILOSOPHER1): (owner_FORK1 = PHILOSOPHER1);
				(FORK2 = rightFork_PHILOSOPHER1): ((owner_FORK1 = PHILOSOPHER1) & (owner_FORK2 = PHILOSOPHER1));
				(FORK3 = rightFork_PHILOSOPHER1): ((owner_FORK3 = PHILOSOPHER1) & (owner_FORK1 = PHILOSOPHER1));
				(FORK4 = rightFork_PHILOSOPHER1): ((owner_FORK1 = PHILOSOPHER1) & (owner_FORK4 = PHILOSOPHER1));
				TRUE: FALSE;
			esac;
		hasAllForks_PHILOSOPHER2 :=
			case
				(FORK1 = rightFork_PHILOSOPHER2): ((owner_FORK1 = PHILOSOPHER2) & (owner_FORK2 = PHILOSOPHER2));
				(FORK2 = rightFork_PHILOSOPHER2): (owner_FORK2 = PHILOSOPHER2);
				(FORK3 = rightFork_PHILOSOPHER2): ((owner_FORK3 = PHILOSOPHER2) & (owner_FORK2 = PHILOSOPHER2));
				(FORK4 = rightFork_PHILOSOPHER2): ((owner_FORK4 = PHILOSOPHER2) & (owner_FORK2 = PHILOSOPHER2));
				TRUE: FALSE;
			esac;
		hasAllForks_PHILOSOPHER3 :=
			case
				((FORK1 = leftFork_PHILOSOPHER3) & (FORK1 = rightFork_PHILOSOPHER3)): (owner_FORK1 = PHILOSOPHER3);
				((FORK1 = leftFork_PHILOSOPHER3) & (FORK2 = rightFork_PHILOSOPHER3)): ((owner_FORK1 = PHILOSOPHER3) & (owner_FORK2 = PHILOSOPHER3));
				((FORK1 = leftFork_PHILOSOPHER3) & (FORK3 = rightFork_PHILOSOPHER3)): ((owner_FORK1 = PHILOSOPHER3) & (owner_FORK3 = PHILOSOPHER3));
				((FORK1 = leftFork_PHILOSOPHER3) & (FORK4 = rightFork_PHILOSOPHER3)): ((owner_FORK1 = PHILOSOPHER3) & (owner_FORK4 = PHILOSOPHER3));
				((FORK1 = rightFork_PHILOSOPHER3) & (FORK2 = leftFork_PHILOSOPHER3)): ((owner_FORK1 = PHILOSOPHER3) & (owner_FORK2 = PHILOSOPHER3));
				((FORK1 = rightFork_PHILOSOPHER3) & (FORK3 = leftFork_PHILOSOPHER3)): ((owner_FORK1 = PHILOSOPHER3) & (owner_FORK3 = PHILOSOPHER3));
				((FORK2 = rightFork_PHILOSOPHER3) & (FORK2 = leftFork_PHILOSOPHER3)): (owner_FORK2 = PHILOSOPHER3);
				((FORK2 = rightFork_PHILOSOPHER3) & (FORK3 = leftFork_PHILOSOPHER3)): ((owner_FORK3 = PHILOSOPHER3) & (owner_FORK2 = PHILOSOPHER3));
				((FORK3 = rightFork_PHILOSOPHER3) & (FORK2 = leftFork_PHILOSOPHER3)): ((owner_FORK3 = PHILOSOPHER3) & (owner_FORK2 = PHILOSOPHER3));
				((FORK3 = rightFork_PHILOSOPHER3) & (FORK3 = leftFork_PHILOSOPHER3)): (owner_FORK3 = PHILOSOPHER3);
				((FORK4 = leftFork_PHILOSOPHER3) & (FORK1 = rightFork_PHILOSOPHER3)): ((owner_FORK1 = PHILOSOPHER3) & (owner_FORK4 = PHILOSOPHER3));
				((FORK4 = leftFork_PHILOSOPHER3) & (FORK2 = rightFork_PHILOSOPHER3)): ((owner_FORK4 = PHILOSOPHER3) & (owner_FORK2 = PHILOSOPHER3));
				((FORK4 = leftFork_PHILOSOPHER3) & (FORK3 = rightFork_PHILOSOPHER3)): ((owner_FORK3 = PHILOSOPHER3) & (owner_FORK4 = PHILOSOPHER3));
				((FORK4 = leftFork_PHILOSOPHER3) & (FORK4 = rightFork_PHILOSOPHER3)): (owner_FORK4 = PHILOSOPHER3);
				((FORK4 = rightFork_PHILOSOPHER3) & (FORK2 = leftFork_PHILOSOPHER3)): ((owner_FORK4 = PHILOSOPHER3) & (owner_FORK2 = PHILOSOPHER3));
				((FORK4 = rightFork_PHILOSOPHER3) & (FORK3 = leftFork_PHILOSOPHER3)): ((owner_FORK3 = PHILOSOPHER3) & (owner_FORK4 = PHILOSOPHER3));
				TRUE: FALSE;
			esac;
		hasAllForks_PHILOSOPHER4 :=
			case
				((FORK1 = leftFork_PHILOSOPHER4) & (FORK1 = rightFork_PHILOSOPHER4)): (owner_FORK1 = PHILOSOPHER4);
				((FORK1 = leftFork_PHILOSOPHER4) & (FORK2 = rightFork_PHILOSOPHER4)): ((owner_FORK1 = PHILOSOPHER4) & (owner_FORK2 = PHILOSOPHER4));
				((FORK1 = leftFork_PHILOSOPHER4) & (FORK3 = rightFork_PHILOSOPHER4)): ((owner_FORK1 = PHILOSOPHER4) & (owner_FORK3 = PHILOSOPHER4));
				((FORK1 = leftFork_PHILOSOPHER4) & (FORK4 = rightFork_PHILOSOPHER4)): ((owner_FORK1 = PHILOSOPHER4) & (owner_FORK4 = PHILOSOPHER4));
				((FORK1 = rightFork_PHILOSOPHER4) & (FORK3 = leftFork_PHILOSOPHER4)): ((owner_FORK1 = PHILOSOPHER4) & (owner_FORK3 = PHILOSOPHER4));
				((FORK2 = leftFork_PHILOSOPHER4) & (FORK1 = rightFork_PHILOSOPHER4)): ((owner_FORK1 = PHILOSOPHER4) & (owner_FORK2 = PHILOSOPHER4));
				((FORK2 = leftFork_PHILOSOPHER4) & (FORK2 = rightFork_PHILOSOPHER4)): (owner_FORK2 = PHILOSOPHER4);
				((FORK2 = leftFork_PHILOSOPHER4) & (FORK3 = rightFork_PHILOSOPHER4)): ((owner_FORK3 = PHILOSOPHER4) & (owner_FORK2 = PHILOSOPHER4));
				((FORK2 = leftFork_PHILOSOPHER4) & (FORK4 = rightFork_PHILOSOPHER4)): ((owner_FORK4 = PHILOSOPHER4) & (owner_FORK2 = PHILOSOPHER4));
				((FORK2 = rightFork_PHILOSOPHER4) & (FORK3 = leftFork_PHILOSOPHER4)): ((owner_FORK3 = PHILOSOPHER4) & (owner_FORK2 = PHILOSOPHER4));
				((FORK3 = rightFork_PHILOSOPHER4) & (FORK3 = leftFork_PHILOSOPHER4)): (owner_FORK3 = PHILOSOPHER4);
				((FORK4 = leftFork_PHILOSOPHER4) & (FORK1 = rightFork_PHILOSOPHER4)): ((owner_FORK1 = PHILOSOPHER4) & (owner_FORK4 = PHILOSOPHER4));
				((FORK4 = leftFork_PHILOSOPHER4) & (FORK2 = rightFork_PHILOSOPHER4)): ((owner_FORK4 = PHILOSOPHER4) & (owner_FORK2 = PHILOSOPHER4));
				((FORK4 = leftFork_PHILOSOPHER4) & (FORK3 = rightFork_PHILOSOPHER4)): ((owner_FORK3 = PHILOSOPHER4) & (owner_FORK4 = PHILOSOPHER4));
				((FORK4 = leftFork_PHILOSOPHER4) & (FORK4 = rightFork_PHILOSOPHER4)): (owner_FORK4 = PHILOSOPHER4);
				((FORK4 = rightFork_PHILOSOPHER4) & (FORK3 = leftFork_PHILOSOPHER4)): ((owner_FORK3 = PHILOSOPHER4) & (owner_FORK4 = PHILOSOPHER4));
				TRUE: FALSE;
			esac;
		leftFork_PHILOSOPHER1 := FORK1;
		leftFork_PHILOSOPHER2 := FORK2;
		leftFork_PHILOSOPHER3 := FORK3;
		leftFork_PHILOSOPHER4 := FORK4;
		rightFork_PHILOSOPHER1 := FORK2;
		rightFork_PHILOSOPHER2 := FORK3;
		rightFork_PHILOSOPHER3 := FORK4;
		rightFork_PHILOSOPHER4 := FORK1;
	CONSTANTS PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF, PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, FORK1, FORK2, FORK3, FORK4, FORK_UNDEF, STATE_UNDEF, EATING, THINKING;
	ASSIGN
		init(owner_FORK1) := PHILOSOPHER_UNDEF;
		init(owner_FORK2) := PHILOSOPHER_UNDEF;
		init(owner_FORK3) := PHILOSOPHER_UNDEF;
		init(owner_FORK4) := PHILOSOPHER_UNDEF;
		init(state_PHILOSOPHER1) := THINKING;
		init(state_PHILOSOPHER2) := THINKING;
		init(state_PHILOSOPHER3) := THINKING;
		init(state_PHILOSOPHER4) := THINKING;
		next(owner_FORK1) :=
			case
				((((owner_FORK1 = PHILOSOPHER4) & (hasAllForks_PHILOSOPHER4 & (state_PHILOSOPHER4 = EATING))) & (var_$phi_0 = PHILOSOPHER4)) | (((hasAllForks_PHILOSOPHER1 & (state_PHILOSOPHER1 = EATING)) & (owner_FORK1 = PHILOSOPHER1)) & (var_$phi_0 = PHILOSOPHER1))) & PHILOSOPHER_UNDEF in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER_UNDEF;
				(((var_$phi_0 = PHILOSOPHER4) & (((!(state_PHILOSOPHER4 = EATING) & hungry_PHILOSOPHER4) & !(owner_FORK4 = PHILOSOPHER_UNDEF)) & (owner_FORK1 = PHILOSOPHER_UNDEF))) | ((var_$phi_0 = PHILOSOPHER4) & ((owner_FORK1 = PHILOSOPHER_UNDEF) & ((!(hasAllForks_PHILOSOPHER4) & (state_PHILOSOPHER4 = EATING)) & !(owner_FORK4 = PHILOSOPHER_UNDEF))))) & PHILOSOPHER4 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER4;
				((((owner_FORK1 = PHILOSOPHER_UNDEF) & (!(hasAllForks_PHILOSOPHER1) & (state_PHILOSOPHER1 = EATING))) & (var_$phi_0 = PHILOSOPHER1)) | ((var_$phi_0 = PHILOSOPHER1) & ((hungry_PHILOSOPHER1 & !(state_PHILOSOPHER1 = EATING)) & (owner_FORK1 = PHILOSOPHER_UNDEF)))) & PHILOSOPHER1 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER1;
				TRUE: owner_FORK1;
			esac;
		next(owner_FORK2) :=
			case
				(((var_$phi_0 = PHILOSOPHER2) & (((state_PHILOSOPHER2 = EATING) & !(hasAllForks_PHILOSOPHER2)) & (owner_FORK2 = PHILOSOPHER_UNDEF))) | ((var_$phi_0 = PHILOSOPHER2) & ((owner_FORK2 = PHILOSOPHER_UNDEF) & (hungry_PHILOSOPHER2 & !(state_PHILOSOPHER2 = EATING))))) & PHILOSOPHER2 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER2;
				((((hasAllForks_PHILOSOPHER1 & (state_PHILOSOPHER1 = EATING)) & (owner_FORK2 = PHILOSOPHER1)) & (var_$phi_0 = PHILOSOPHER1)) | ((var_$phi_0 = PHILOSOPHER2) & ((hasAllForks_PHILOSOPHER2 & (state_PHILOSOPHER2 = EATING)) & (owner_FORK2 = PHILOSOPHER2)))) & PHILOSOPHER_UNDEF in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER_UNDEF;
				((((owner_FORK2 = PHILOSOPHER_UNDEF) & ((hungry_PHILOSOPHER1 & !(state_PHILOSOPHER1 = EATING)) & !(owner_FORK1 = PHILOSOPHER_UNDEF))) & (var_$phi_0 = PHILOSOPHER1)) | (((owner_FORK2 = PHILOSOPHER_UNDEF) & (!(owner_FORK1 = PHILOSOPHER_UNDEF) & (!(hasAllForks_PHILOSOPHER1) & (state_PHILOSOPHER1 = EATING)))) & (var_$phi_0 = PHILOSOPHER1))) & PHILOSOPHER1 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER1;
				TRUE: owner_FORK2;
			esac;
		next(owner_FORK3) :=
			case
				(((var_$phi_0 = PHILOSOPHER2) & ((!(owner_FORK2 = PHILOSOPHER_UNDEF) & (hungry_PHILOSOPHER2 & !(state_PHILOSOPHER2 = EATING))) & (owner_FORK3 = PHILOSOPHER_UNDEF))) | ((var_$phi_0 = PHILOSOPHER2) & ((((state_PHILOSOPHER2 = EATING) & !(hasAllForks_PHILOSOPHER2)) & !(owner_FORK2 = PHILOSOPHER_UNDEF)) & (owner_FORK3 = PHILOSOPHER_UNDEF)))) & PHILOSOPHER2 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER2;
				(((var_$phi_0 = PHILOSOPHER3) & ((!(hasAllForks_PHILOSOPHER3) & (state_PHILOSOPHER3 = EATING)) & (owner_FORK3 = PHILOSOPHER_UNDEF))) | ((var_$phi_0 = PHILOSOPHER3) & ((owner_FORK3 = PHILOSOPHER_UNDEF) & (!(state_PHILOSOPHER3 = EATING) & hungry_PHILOSOPHER3)))) & PHILOSOPHER3 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER3;
				(((var_$phi_0 = PHILOSOPHER3) & ((owner_FORK3 = PHILOSOPHER3) & (hasAllForks_PHILOSOPHER3 & (state_PHILOSOPHER3 = EATING)))) | ((var_$phi_0 = PHILOSOPHER2) & ((owner_FORK3 = PHILOSOPHER2) & (hasAllForks_PHILOSOPHER2 & (state_PHILOSOPHER2 = EATING))))) & PHILOSOPHER_UNDEF in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER_UNDEF;
				TRUE: owner_FORK3;
			esac;
		next(owner_FORK4) :=
			case
				(((var_$phi_0 = PHILOSOPHER3) & ((owner_FORK4 = PHILOSOPHER3) & (hasAllForks_PHILOSOPHER3 & (state_PHILOSOPHER3 = EATING)))) | ((var_$phi_0 = PHILOSOPHER4) & ((owner_FORK4 = PHILOSOPHER4) & (hasAllForks_PHILOSOPHER4 & (state_PHILOSOPHER4 = EATING))))) & PHILOSOPHER_UNDEF in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER_UNDEF;
				(((var_$phi_0 = PHILOSOPHER4) & ((owner_FORK4 = PHILOSOPHER_UNDEF) & (!(state_PHILOSOPHER4 = EATING) & hungry_PHILOSOPHER4))) | (((owner_FORK4 = PHILOSOPHER_UNDEF) & (!(hasAllForks_PHILOSOPHER4) & (state_PHILOSOPHER4 = EATING))) & (var_$phi_0 = PHILOSOPHER4))) & PHILOSOPHER4 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER4;
				(((var_$phi_0 = PHILOSOPHER3) & ((owner_FORK4 = PHILOSOPHER_UNDEF) & (!(owner_FORK3 = PHILOSOPHER_UNDEF) & (!(state_PHILOSOPHER3 = EATING) & hungry_PHILOSOPHER3)))) | ((var_$phi_0 = PHILOSOPHER3) & ((owner_FORK4 = PHILOSOPHER_UNDEF) & ((!(hasAllForks_PHILOSOPHER3) & (state_PHILOSOPHER3 = EATING)) & !(owner_FORK3 = PHILOSOPHER_UNDEF))))) & PHILOSOPHER3 in {PHILOSOPHER1, PHILOSOPHER2, PHILOSOPHER3, PHILOSOPHER4, PHILOSOPHER_UNDEF}: PHILOSOPHER3;
				TRUE: owner_FORK4;
			esac;
		next(state_PHILOSOPHER1) :=
			case
				((hasAllForks_PHILOSOPHER1 & (state_PHILOSOPHER1 = EATING)) & (var_$phi_0 = PHILOSOPHER1)): THINKING;
				(((hungry_PHILOSOPHER1 & !(state_PHILOSOPHER1 = EATING)) & (var_$phi_0 = PHILOSOPHER1)) | ((!(hasAllForks_PHILOSOPHER1) & (state_PHILOSOPHER1 = EATING)) & (var_$phi_0 = PHILOSOPHER1))): EATING;
				TRUE: state_PHILOSOPHER1;
			esac;
		next(state_PHILOSOPHER2) :=
			case
				((var_$phi_0 = PHILOSOPHER2) & (hasAllForks_PHILOSOPHER2 & (state_PHILOSOPHER2 = EATING))): THINKING;
				(((var_$phi_0 = PHILOSOPHER2) & (hungry_PHILOSOPHER2 & !(state_PHILOSOPHER2 = EATING))) | ((var_$phi_0 = PHILOSOPHER2) & ((state_PHILOSOPHER2 = EATING) & !(hasAllForks_PHILOSOPHER2)))): EATING;
				TRUE: state_PHILOSOPHER2;
			esac;
		next(state_PHILOSOPHER3) :=
			case
				(((var_$phi_0 = PHILOSOPHER3) & (!(state_PHILOSOPHER3 = EATING) & hungry_PHILOSOPHER3)) | ((var_$phi_0 = PHILOSOPHER3) & (!(hasAllForks_PHILOSOPHER3) & (state_PHILOSOPHER3 = EATING)))): EATING;
				((var_$phi_0 = PHILOSOPHER3) & (hasAllForks_PHILOSOPHER3 & (state_PHILOSOPHER3 = EATING))): THINKING;
				TRUE: state_PHILOSOPHER3;
			esac;
		next(state_PHILOSOPHER4) :=
			case
				(((var_$phi_0 = PHILOSOPHER4) & (!(hasAllForks_PHILOSOPHER4) & (state_PHILOSOPHER4 = EATING))) | ((var_$phi_0 = PHILOSOPHER4) & (!(state_PHILOSOPHER4 = EATING) & hungry_PHILOSOPHER4))): EATING;
				((var_$phi_0 = PHILOSOPHER4) & (hasAllForks_PHILOSOPHER4 & (state_PHILOSOPHER4 = EATING))): THINKING;
				TRUE: state_PHILOSOPHER4;
			esac;
	INVAR	((var_$phi_0 = PHILOSOPHER3) | (var_$phi_0 = PHILOSOPHER2) | (var_$phi_0 = PHILOSOPHER4) | (var_$phi_0 = PHILOSOPHER1));
--CTL properties
CTLSPEC NAME ctl0 := !(EF(deadlock));
CTLSPEC NAME ctl1 := AG(((state_PHILOSOPHER1 = EATING) -> EF((state_PHILOSOPHER1 = THINKING))));
--AsmetaL invariants
CTLSPEC	AG(!(deadlock));
